{"version":3,"sources":["openseadragon-justified-collection.js"],"names":["$","version","major","Error","World","prototype","arrange","options","this","justifiedCollectionInstance","viewer","justifiedCollection","extend","columns","tileMargin","ImageRow","Row","i","_items","length","item","addTileSource","draw","world","ready","images","height","resizePercentage","totalWidth","firstRow","rowWidth","line","called","x","map","image","setHeight","setPosition","y","tileSourceBounds","getBounds","width","tileSource","isReady","ratio","Math","round","push","OpenSeadragon"],"mappings":"CAAA,SAAAA,GACA,YAEA,KAAAA,EAAAC,SAAAD,EAAAC,QAAAC,MAAA,EACA,KAAA,IAAAC,OAAA,kFAGAH,GAAAI,MAAAC,UAAAC,QAAA,SAAAC,GAMA,MALAC,MAAAC,8BAAAF,IACAA,EAAAA,MACAA,EAAAG,OAAAF,KACAA,KAAAC,4BAAA,GAAAT,GAAAW,oBAAAJ,IAEAC,KAAAC,6BAQAT,EAAAW,oBAAA,SAAAJ,GACAP,EAAAY,QAAA,EAAAJ,MACAK,QAAAN,EAAAM,SAAA,EACAC,WAAAP,EAAAO,YAAA,IACAP,EAIA,KAAA,GAFAQ,GAAA,GAAAf,GAAAgB,IAAAR,MAEAS,EAAA,EAAAA,EAAAT,KAAAE,OAAAQ,OAAAC,OAAAF,IAAA,CACA,GAAAG,GAAAZ,KAAAE,OAAAQ,OAAAD,EAGAF,GAAAM,cAAAD,GAIAL,EAAAO,QAIAtB,EAAAgB,IAAA,SAAAO,GACAvB,EAAAY,QAAA,EAAAJ,KAAAe,GAEAf,KAAAgB,OAAA,EACAhB,KAAAiB,UACAjB,KAAAkB,OAAA,EACAlB,KAAAmB,iBAAA,EACAnB,KAAAoB,WAAA,EACApB,KAAAqB,UAAA,EACArB,KAAAsB,SAAA,EACAtB,KAAAuB,KAAA,EACAvB,KAAAwB,OAAA,EAGAxB,KAAAc,KAAA,WAEA,GAAAW,GAAA,CACAzB,MAAAiB,OAAAS,IAAA,SAAAC,GACAA,EAAAC,UAAA5B,KAAAkB,QAAA,GACAS,EAAAE,aAAAJ,EAAAA,EAAAK,EAAA9B,KAAAuB,MACA,IAAAQ,GAAAJ,EAAAK,WACAP,GAAAA,EAAAM,EAAAE,MAAAjC,KAAAM,WAAAN,KAAAkB,QACAlB,MAGAA,KAAAgB,OAAA,EACAhB,KAAAuB,MAAAvB,KAAAkB,OAAAlB,KAAAM,WACAN,KAAAiB,UAEAjB,KAAAsB,SAAA,GAGAtB,KAAAa,cAAA,SAAAqB,GAEA,GADAlC,KAAAwB,SACAxB,KAAAmC,UACA,KAAA,oCAIAD,GAAAN,UAAA,GAAA,EAEA,IAAAG,GAAAG,EAAAF,WASA,IARAE,EAAAE,MAAAC,KAAAC,MAAAP,EAAAE,MAAAF,EAAAb,OAAA,KAAA,IACAgB,EAAAD,MAAAF,EAAAE,MAEAjC,KAAAiB,OAAAsB,KAAAL,GAEAlC,KAAAsB,SAAAtB,KAAAsB,SAAAY,EAAA,MAAAlC,KAAAM,WAGAN,KAAAqB,YAAA,GAAArB,KAAAiB,OAAAN,SAAAX,KAAAK,QAKA,MAJAL,MAAAoB,WAAApB,KAAAsB,SACAtB,KAAAqB,UAAA,EACArB,KAAAgB,OAAA,MACAhB,MAAAc,MAIA,IAAAd,KAAAqB,YAAA,GAAArB,KAAAsB,UAAAtB,KAAAoB,WAAA,CACA,GAAAD,GAAAnB,KAAAoB,WAAApB,KAAAsB,QACAtB,MAAAkB,OAAAC,EACAnB,KAAAgB,OAAA,EACAhB,KAAAc,SAIAd,KAAAmC,QAAA,WACA,MAAAnC,MAAAgB,SAIAwB","file":"openseadragon-justified-collection.min.js","sourcesContent":["(function ($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonImagefilters requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.World.prototype.arrange = function (options) {\n        if (!this.justifiedCollectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.justifiedCollectionInstance = new $.justifiedCollection(options);\n        }\n        return this.justifiedCollectionInstance;\n    };\n\n    /**\n     * @class justifiedCollection\n     * @classdesc Provides functionality for arranging images in a justified grid layout\n     * @param {Object} options\n     */\n    $.justifiedCollection = function (options) {\n        $.extend(true, this, {\n            columns: options.columns || 8,\n            tileMargin: options.tileMargin || 0.1\n        }, options);\n\n        var ImageRow = new $.Row(this);\n\n        for (var i = 0; i < this.viewer._items.length; i++) {\n            var item = this.viewer._items[i];\n\n            //imagerow will set positions of items\n            ImageRow.addTileSource(item);\n        }\n\n        //draw remaining\n        ImageRow.draw();\n        \n    };\n\n    $.Row = function (world){\n        $.extend(true, this, world);\n\n        this.ready = false;\n        this.images = []; //temp array of images needed for row buffering\n        this.height = 1; //changed based on ratio of row based on first row\n        this.resizePercentage = 1;\n        this.totalWidth = 0; //after first row we know the total width\n        this.firstRow = true; //start with first row\n        this.rowWidth = 0; //hold temp rowWidth of each row.\n        this.line = 0; //y position of images to position\n        this.called = 0;\n\n        //positions rows of images rescales row ti make it fit first row\n        this.draw = function() {\n\n            var x = 0;\n            this.images.map(function(image){\n                image.setHeight(this.height,true);\n                image.setPosition({x:x,y:this.line});\n                var tileSourceBounds = image.getBounds();\n                x = x+tileSourceBounds.width+(this.tileMargin*this.height);\n            }, this);\n\n\n            this.ready = false;\n            this.line += this.height+this.tileMargin;\n            this.images = [];\n            //this.resizePercentage = 1;\n            this.rowWidth = 0;\n        };\n\n        this.addTileSource = function (tileSource) {\n            this.called++;\n            if(this.isReady()){\n                throw 'Can\\'t add tilesource to ready row!';\n            }\n\n            //set height of tile to 1, image will change keeping right ratio, images are of equal height in each row\n            tileSource.setHeight(1, true);\n\n            var tileSourceBounds = tileSource.getBounds();\n            tileSource.ratio = Math.round((tileSourceBounds.width/tileSourceBounds.height)*100) / 100;\n            tileSource.width = tileSourceBounds.width;\n\n            this.images.push(tileSource);\n\n            this.rowWidth = this.rowWidth+(tileSource.width)+this.tileMargin;\n\n            //first row based on number of images, based on this the other rows will match it width\n            if(this.firstRow === true && this.images.length === this.columns) {\n                this.totalWidth = this.rowWidth;\n                this.firstRow = false;\n                this.ready = true;\n                this.draw();\n                return;\n            }\n\n            if(this.firstRow === false && this.rowWidth >= this.totalWidth ){\n                var resizePercentage = this.totalWidth/this.rowWidth; //1200/1300 = 0.92\n                this.height = resizePercentage;\n                this.ready = true;\n                this.draw();\n            }\n        };\n\n        this.isReady = function() {\n            return this.ready;\n        };\n    };\n\n})(OpenSeadragon);"],"sourceRoot":"/source/"}