{"version":3,"sources":["openseadragon-justified-collection.js"],"names":["$","version","major","Error","World","prototype","arrange","options","this","justifiedCollectionInstance","viewer","justifiedCollection","extend","columns","tileMargin","tileSize","showLastRow","ImageRow","Row","i","_items","length","item","addTileSource","draw","world","ready","images","height","resizePercentage","totalWidth","firstRow","rowWidth","line","x","map","image","setHeight","setPosition","y","tileSourceBounds","getBounds","width","tileSource","isReady","ratio","Math","round","push","OpenSeadragon"],"mappings":"CAAA,SAAAA,GACA,YAEA,KAAAA,EAAAC,SAAAD,EAAAC,QAAAC,MAAA,EACA,KAAA,IAAAC,OAAA,kFAGAH,GAAAI,MAAAC,UAAAC,QAAA,SAAAC,GAMA,MALAC,MAAAC,8BAAAF,IACAA,EAAAA,MACAA,EAAAG,OAAAF,KACAA,KAAAC,4BAAA,GAAAT,GAAAW,oBAAAJ,IAEAC,KAAAC,6BAQAT,EAAAW,oBAAA,SAAAJ,GACAP,EAAAY,QAAA,EAAAJ,MACAK,QAAAN,EAAAM,SAAA,EACAC,WAAAP,EAAAO,YAAA,GACAC,SAAAR,EAAAQ,UAAA,IACAC,YAAAT,EAAAS,cAAA,GACAT,EAIA,KAAA,GAFAU,GAAA,GAAAjB,GAAAkB,IAAAV,MAEAW,EAAA,EAAAA,EAAAX,KAAAE,OAAAU,OAAAC,OAAAF,IAAA,CACA,GAAAG,GAAAd,KAAAE,OAAAU,OAAAD,EAGAF,GAAAM,cAAAD,GAIAd,KAAAQ,eAAA,GACAC,EAAAO,QAKAxB,EAAAkB,IAAA,SAAAO,GACAzB,EAAAY,QAAA,EAAAJ,KAAAiB,GAEAjB,KAAAkB,OAAA,EACAlB,KAAAmB,UACAnB,KAAAoB,OAAA,EACApB,KAAAqB,iBAAA,EACArB,KAAAsB,WAAA,EACAtB,KAAAuB,UAAA,EACAvB,KAAAwB,SAAA,EACAxB,KAAAyB,KAAA,EAGAzB,KAAAgB,KAAA,WACA,GAAAU,GAAA,CACA1B,MAAAmB,OAAAQ,IAAA,SAAAC,GACAA,EAAAC,UAAA7B,KAAAoB,QAAA,GACAQ,EAAAE,aAAAJ,EAAAA,EAAAK,EAAA/B,KAAAyB,MACA,IAAAO,GAAAJ,EAAAK,WACAP,GAAAA,EAAAM,EAAAE,MAAAlC,KAAAM,WAAAN,KAAAO,SAAAP,KAAAoB,QACApB,MAGAA,KAAAyB,MAAAzB,KAAAoB,OAAApB,KAAAM,WAAAN,KAAAO,SAGAP,KAAAkB,OAAA,EACAlB,KAAAmB,UACAnB,KAAAwB,SAAA,GAIAxB,KAAAe,cAAA,SAAAoB,GACA,GAAAnC,KAAAoC,UACA,KAAA,oCAIAD,GAAAN,UAAA,GAAA,EAEA,IAAAG,GAAAG,EAAAF,WAQA,OAPAE,GAAAE,MAAAC,KAAAC,MAAAP,EAAAE,MAAAF,EAAAZ,OAAA,KAAA,IACAe,EAAAD,MAAAF,EAAAE,MAEAlC,KAAAmB,OAAAqB,KAAAL,GACAnC,KAAAwB,SAAAxB,KAAAwB,SAAAW,EAAA,MAAAnC,KAAAM,WAGAN,KAAAuB,YAAA,GAAAvB,KAAAmB,OAAAN,SAAAb,KAAAK,SACAL,KAAAsB,WAAAtB,KAAAwB,SACAxB,KAAAuB,UAAA,EACAvB,KAAAkB,OAAA,MACAlB,MAAAgB,aAKAhB,KAAAuB,YAAA,GAAAvB,KAAAwB,UAAAxB,KAAAsB,aAEAtB,KAAAoB,OAAApB,KAAAsB,WAAAtB,KAAAwB,SACAxB,KAAAkB,OAAA,EACAlB,KAAAgB,UAKAhB,KAAAoC,QAAA,WACA,MAAApC,MAAAkB,SAIAuB","file":"openseadragon-justified-collection.min.js","sourcesContent":["(function ($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonImagefilters requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.World.prototype.arrange = function (options) {\n        if (!this.justifiedCollectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.justifiedCollectionInstance = new $.justifiedCollection(options);\n        }\n        return this.justifiedCollectionInstance;\n    };\n\n    /**\n     * @class justifiedCollection\n     * @classdesc Provides functionality for arranging images in a justified grid layout\n     * @param {Object} options\n     */\n    $.justifiedCollection = function (options) {\n        $.extend(true, this, {\n            columns: options.columns || 0,\n            tileMargin: options.tileMargin || 80,\n            tileSize: options.tileSize || 800,\n            showLastRow: options.showLastRow || true\n        }, options);\n\n        var ImageRow = new $.Row(this);\n\n        for (var i = 0; i < this.viewer._items.length; i++) {\n            var item = this.viewer._items[i];\n\n            //imagerow will set positions of items\n            ImageRow.addTileSource(item);\n        }\n\n        //draw remaining\n        if(this.showLastRow === true){\n            ImageRow.draw();\n        }\n\n    };\n\n    $.Row = function (world){\n        $.extend(true, this, world);\n\n        this.ready = false; //if true row is ready for drawing\n        this.images = []; //temp array of images needed for row buffering\n        this.height = 1; //changed based on ratio of row based on first row\n        this.resizePercentage = 1;\n        this.totalWidth = 0; //after first row we know the total width\n        this.firstRow = true; //start with first row\n        this.rowWidth = 0; //hold temp rowWidth of each row.\n        this.line = 0; //y position of images to position\n\n        //positions rows of images rescales row to make it fit first row\n        this.draw = function() {\n            var x = 0;\n            this.images.map(function(image){\n                image.setHeight(this.height,true);\n                image.setPosition({x:x,y:this.line});\n                var tileSourceBounds = image.getBounds();\n                x = x+tileSourceBounds.width+((this.tileMargin/this.tileSize)*this.height);\n            }, this);\n\n            //increase x coordinate\n            this.line += this.height+(this.tileMargin/this.tileSize);\n\n            //reset values needed for row draw\n            this.ready = false;\n            this.images = [];\n            this.rowWidth = 0;\n        };\n\n        //add tileSource to row\n        this.addTileSource = function (tileSource) {\n            if(this.isReady()){\n                throw 'Can\\'t add tilesource to ready row!';\n            }\n\n            //set height of tile to 1, image will change keeping right ratio, images are of equal height in each row\n            tileSource.setHeight(1, true);\n\n            var tileSourceBounds = tileSource.getBounds();\n            tileSource.ratio = Math.round((tileSourceBounds.width/tileSourceBounds.height)*100) / 100;\n            tileSource.width = tileSourceBounds.width;\n\n            this.images.push(tileSource);\n            this.rowWidth = this.rowWidth+(tileSource.width)+this.tileMargin;\n\n            //first row based on number of images, based on this the other rows will match it width\n            if(this.firstRow === true && this.images.length === this.columns) {\n                this.totalWidth = this.rowWidth;\n                this.firstRow = false;\n                this.ready = true;\n                this.draw();\n                return;\n            }\n\n            //otherwise draw the row if width ot total row is met\n            if(this.firstRow === false && this.rowWidth >= this.totalWidth ){\n                //resizePercentage\n                this.height = this.totalWidth/this.rowWidth; //1200/1300 = 0.92;\n                this.ready = true;\n                this.draw();\n            }\n        };\n\n        //is the row ready to be drawn\n        this.isReady = function() {\n            return this.ready;\n        };\n    };\n\n})(OpenSeadragon);"]}